<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on MyThinkPond</title>
    <link>http://MyThinkPond.com/categories/python/</link>
    <description>Recent content in Python on MyThinkPond</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Jun 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://MyThinkPond.com/categories/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python Tips: On Getting Started, Unit Testing and Code Coverage</title>
      <link>http://MyThinkPond.com/post/2020-06-02-python-tips-on-unit-testing-and-code-coverage/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate>
      <guid>http://MyThinkPond.com/post/2020-06-02-python-tips-on-unit-testing-and-code-coverage/</guid>
      <description>tl;dr Here is a collection of useful Python tips, a starter &amp;ldquo;Hello World&amp;rdquo; Python template for both web (using Flask) and stand-alone script. And additional tips in writing effective Python code, getting started, Unit Tests and using the Coverage tool to improve code.&#xA;Photo by Fabian Grohs on Unsplash&#xA;Getting Started - Introducing &amp;ldquo;Python Hello World&amp;rdquo; Template Sometimes when we need to get started in Python, we need an easy &amp;ldquo;Hello World&amp;rdquo; template that gets us started with all the basics including unit test and coverage reports.</description>
    </item>
    <item>
      <title>Python humanize time-interval without Arrow or Humanize libraries</title>
      <link>http://MyThinkPond.com/post/2020-05-26-python-humanize-time-interval-without-external-libraries/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      <guid>http://MyThinkPond.com/post/2020-05-26-python-humanize-time-interval-without-external-libraries/</guid>
      <description>tl;dr Sometimes when we need to debug functions in Python, we need a way to write some quick timer code to capture the time-delta and to compute the time it took for the function to execute. This article shows you a quick and easy way to humanize a time-interval/time-delta without bringing in additional dependencies or libraries like Arrow or Humanize.&#xA;Elapsed Time: 2 Days, 5 Hours, 7 Minutes, 13 Seconds Yucel Moral (@yucelmoran) at Unsplash</description>
    </item>
    <item>
      <title>uvloop - Python replacement for asyncio event loop</title>
      <link>http://MyThinkPond.com/post/2017-04-01-uvloop-python-replacement-for-asyncio-event-loop/</link>
      <pubDate>Sat, 01 Apr 2017 16:26:27 +0000</pubDate>
      <guid>http://MyThinkPond.com/post/2017-04-01-uvloop-python-replacement-for-asyncio-event-loop/</guid>
      <description>uvloop is a fast, drop-in replacement of the built-in asyncio event loop. uvloop is implemented in Cython and uses libuv under the hood.&#xA;Benefits: uvloop makes asyncio 2-4x faster.&#xA;Cons: uvloop is available from PyPI but it requires Python 3.5. (The reason for this is asyncio was introduced in Python 3.4 and above.) Unless your project is based on Python 3.4+ - you may not be able to leverage this library.</description>
    </item>
    <item>
      <title>Uninstall python eggs that you installed using setup.py</title>
      <link>http://MyThinkPond.com/2016/09/30/uninstall-python-eggs-that-you-installed-using-setup-py/</link>
      <pubDate>Fri, 30 Sep 2016 15:22:59 +0000</pubDate>
      <guid>http://MyThinkPond.com/2016/09/30/uninstall-python-eggs-that-you-installed-using-setup-py/</guid>
      <description>In Python, most libraries are available using the pip install process. But for cases, where you are distributing code to be installed in customer sites where you may or may not have a internet connection to the pip libraries, you resort to the legacy setup.py process.&#xA;When you install using the setup.py process, the setup.py copies it&amp;rsquo;s collection of python files to the site-packages folder for your python virtual-environment. On a CentOS, this might be a location under (/usr/lib/python2.</description>
    </item>
    <item>
      <title>Python pycharm - configuring remote interpreters from Windows to Linux</title>
      <link>http://MyThinkPond.com/2012/04/20/python-pycharm-configuring-remote-interpreters-from-windows-to-linux/</link>
      <pubDate>Fri, 20 Apr 2012 19:32:53 +0000</pubDate>
      <guid>http://MyThinkPond.com/2012/04/20/python-pycharm-configuring-remote-interpreters-from-windows-to-linux/</guid>
      <description>If you are an avid Python developer, you may all be excited about the new features available in the Pycharm 2.5 release, especially the remote interpreters, virtualenv and setup.py support. You can read more about the new exciting features here.&#xA;But as I started to tinker with the &amp;ldquo;remote interpreter&amp;rdquo; feature - I stumbled upon some challenges and I thought I&amp;rsquo;d document them for other PyCharm users who might benefit from this blog entry.</description>
    </item>
    <item>
      <title>Configure static resources in Django - Python</title>
      <link>http://MyThinkPond.com/2012/03/01/configure-static-resources-in-django-python/</link>
      <pubDate>Thu, 01 Mar 2012 17:53:35 +0000</pubDate>
      <guid>http://MyThinkPond.com/2012/03/01/configure-static-resources-in-django-python/</guid>
      <description>Working on a Django project, one of the first things that one would encounter is configuring Django for static resources such as &amp;ldquo;css&amp;rdquo;, &amp;ldquo;images&amp;rdquo;, &amp;ldquo;jpeg&amp;rdquo; and &amp;ldquo;js&amp;rdquo;. In looking at the &amp;ldquo;StaticResources&amp;rdquo; link that&amp;rsquo;s part of the Django documentation, it&amp;rsquo;s a bit cryptic for someone who&amp;rsquo;s starting out in Django and Python. So here&amp;rsquo;s a step-by-step on two ways to configure your static-resources in a Django project.&#xA;This method is described in the Django documentation and is probably the preferred approach.</description>
    </item>
    <item>
      <title>How-To Install mod_python and the compile error - apxs:Error: Command failed with rc=65536</title>
      <link>http://MyThinkPond.com/2011/12/29/installing-mod_python-compile-error-apxserror-command-failed-with-rc65536/</link>
      <pubDate>Thu, 29 Dec 2011 03:09:12 +0000</pubDate>
      <guid>http://MyThinkPond.com/2011/12/29/installing-mod_python-compile-error-apxserror-command-failed-with-rc65536/</guid>
      <description>Below are my steps to installing mod_python under Apache HTTPD in CentOS 6.2.&#xA;Download mod_python-3.3.1.tgz or a later version of mod_python available here: http://archive.apache.org/dist/httpd/modpython/&#xA;[sourcecode] curl -O http://archive.apache.org/dist/httpd/modpython/mod_python-3.3.1.tgz tar zxvf mod_python-3.3.1.tgz cd mod_python-3.3.1 ./configure make [/sourcecode]&#xA;You may encounter the following error at this point: apxs:Error: Command failed with rc=65536&#xA;If so&amp;hellip; no worries&amp;hellip;&#xA;This bug has been addressed here: https://bugzilla.redhat.com/show_bug.cgi?id=465246&#xA;Download the patch and (if you can figure out how to patch like I did, I manually opened the file and examined the contents: ` diff -rNu mod_python-3.</description>
    </item>
    <item>
      <title>How to upgrade to Python 2.7 on CentOS</title>
      <link>http://MyThinkPond.com/2011/12/28/how-to-upgrade-to-python-2-7-on-centos/</link>
      <pubDate>Wed, 28 Dec 2011 17:58:32 +0000</pubDate>
      <guid>http://MyThinkPond.com/2011/12/28/how-to-upgrade-to-python-2-7-on-centos/</guid>
      <description>If you tried upgrading to Python 2.7 on CentOS, you will quickly find out that the RPM&amp;rsquo;s don&amp;rsquo;t exist for this in the repos. So here&amp;rsquo;s a short summary of what I did to upgrade my Python to 2.7 on CentOS.&#xA;Based on a few Google searches&amp;hellip; I discovered that a few dependent packages are required before you try upgrading to Python 2.7.&#xA;[sourcecode]&#xA;yum -y groupinstall &amp;lsquo;Development Tools&amp;rsquo; yum -y install openssl-devel* ncurses-devel* zlib*.</description>
    </item>
  </channel>
</rss>
